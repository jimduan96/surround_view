/*****************************************************************************
 *
 * Copyright 2019 NXP
 * All Rights Reserved
 *
 *****************************************************************************
 *
 * THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/


#include "isp_gen.h"
#include "isp_user_define.h"
#include "ov10635_surround_c.h"
 
 int main(int, char **)
{

/**********************************************************************
    The ISP_CALL is placeholder for calling the graph. 
    The definition of ISP_CALL is generated by graph tool to perform 
    all the manipulations with created process. 
    The user can change this code using other methods for process manipulation
    generated by graph tool.
**********************************************************************/

    ISP_CALL();

    return 0;

}

 /**********************************************************************
     The io_config is placeholder for calling the initialization of Input/Output.
     io_config is called from the code generated by graph tool.
     The user should add the code to execute all steps to initialize
     DDR buffers.
 **********************************************************************/
void io_config(sdi_grabber *lpGrabber)
{
    /* Insert the code to initialize  DDR buffers */   
	// JD
		sdi_FdmaIO *lpFdma = (sdi_FdmaIO*)lpGrabber->IoGet(SEQ_OTHRIX_FDMA);

		SDI_ImageDescriptor lFrmDesc = SDI_ImageDescriptor(WIDTH_DDR, HEIGHT_DDR, RGB888);
		lpFdma->DdrBufferDescSet(FDMA_IX_FastDMA_Out, lFrmDesc);

		lpFdma->DdrBuffersAlloc(FDMA_IX_FastDMA_Out, DDR_OUT_BUFFER_CNT);
}

/**********************************************************************
    The camera_config is placeholder for calling the initialization of camera. 
    camera_config is called from the code generated by graph tool. 
    The user should add the code to execute all steps to initialize 
    the camera installed in his board.
**********************************************************************/
void camera_config()
{
    /* Insert the code to initialize  the camera */ 
}
 
 
